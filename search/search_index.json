{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"quickstart/","text":"Quickstart \u00b6 How to create a pack from scratch Basic Concepts \u00b6 Voodoo Packs are recipes for Voodoo to figure out all mods and dependencies this creates lockpacks , where voodoo pinned all versions and copied input files intoa archine voodoo packages using the lockpacks as inputs, providing reproducable deployments Downloading Voodoo \u00b6 grab yourself a voodoo jar from the releases # verify voodoo version java -jar voodoo.jar # optional # setup alias for the rest of the tutorial alias voodoo = \"java -jar $( readlink -f voodoo-0.6.0-SNAPSHOT.jar ) \" # optional # setup bash autocomplete _VOODOO_COMPLETE = bash voodoo > voodoo-autocomplete.sh source voodoo-autocomplete.sh Setup Modpack Repository \u00b6 run the generateSchema command once to make it generate a config.json voodoo generateSchema now you should see config.json /config.json { \"$schema\" : \"./schema/config.schema.json\" , \"curseforgeGenerators\" : { }, \"forgeGenerators\" : { }, \"fabricGenerators\" : { }, \"overrides\" : { } } gitignore \u00b6 these folders should probably be gitignored because they contain autogenerated content (lots of it) so greate a .gitignore file (//TODO: make this part of a setup command) /.gitignore .completions /_upload/ reports/ logs/ docs/ schema/ Autocompletion Configuration \u00b6 we are interested in fabric and fabric mods on curseforge /config.json { \"$schema\" : \"./schema/config.schema.json\" , \"curseforgeGenerators\" : { \"Fabric\" : { \"section\" : \"MODS\" , \"categories\" : [ \"Fabric\" ], \"mcVersions\" : [ \"1.16\" , \"1.16.1\" , \"1.16.2\" , \"1.16.3\" ] } }, \"forgeGenerators\" : { }, \"fabricGenerators\" : { \"Fabric\" : { \"requireStable\" : true } }, \"overrides\" : { } } after running generateSchema again these will be available via json-schema for autocompletions Create a Modpack \u00b6 we are going to create modpack with the id magicpack for Minecraft version 1.16.3 (but this is just for the first version of the pack) voodoo create pack --id magicpack --mcVersion 1 .16.3 you should now see a new folder magicpack/ containing several files /magicpack/modpack.meta.json contains general pack information as well as where you will upload your modpack (fileserver or similar) /magicpack/v0.0.1.voodoo.json contains specific info about one version as well as the modlist the filename does not matter as long as the extension matches .voodoo.json magicpack/v0.0.1_src/ is the folder for all configuration file and related things, this is going to be minecraft/ folder the version specific .voodoo.json contains a reference to the folder name, try to keep them separate when maintaining multiple versions Set Modloader \u00b6 by default the modloader is set to None /magicpack/v0.0.1.voodoo.json \"modloader\" : { \"type\" : \"modloader.none\" } , lets replace with with fabric /magicpack/v0.0.1.voodoo.json \"modloader\" : { \"type\" : \"modloader.fabric\" , \"intermediateMappings\" : \"Fabric/1.16.3\" } , Fabric/1.16.3 is from the fabricGenerator that was named Fabric this field has json-schema enum constraint, so autocompletion should be available after running generateSchema Add Mods \u00b6 currently the modlist is empty: /magicpack/v0.0.1.voodoo.json \"mods\" : [ ] there is multiple types of entries for mods - curse for curseforge mods - direct for direct url downloads - jenkins for things fro ma jenkins CI server - local for taking mods from /local/ folder since we setup mods from curseforge with the name Fabric we can use them so lets add some mods /magicpack/v0.0.1.voodoo.json \"mods\" : [ { \"type\" : \"curse\" , \"projectName\" : \"Fabric/appleskin\" }, { \"type\" : \"curse\" , \"projectName\" : \"Fabric/hwyla\" } ] //TODO: add sections about overrides and properties of entries Building the pack \u00b6 building the pack does resolve all dependencies of entries and pins versions voodoo build --id magicpack this created /magicpack/lock/ folder cotnaining the output artifacts DO NOT DELETE this folder unless you know what you are doing this folder contains the inputs for all tasks (except build ) Testing in MultiMC \u00b6 before deploying the pack, lets make sure it runs first before this make sure multimc is in your PATH voodoo launch multimc --id magicpack Packaging and Upload \u00b6 voodoo package --id magicpack --target voodoo --target mmc-voodoo --target server this created /_upload/voodoo/ , /_upload/multimc-voodoo and /_upload/server/ upload selfupdating pack \u00b6 upload the content of /_upload/voodoo/ to $uploadBaseUrl (configured in /magicpack/modpack.meta.json ) make sure to NOT DELETE existing files on the fileserver example: \"uploadBaseUrl\": \"https://mydomain.com/mc/\" /_upload/voodoo/packages.json should be accessible from https://mydomain.com/mc/packages.json /_upload/multimc-voodoo contains multimc instances that selfupdate (TODO: currently it create a zip for each version, but they all selfupdate?) Deploy server \u00b6 upload /_upload/server/magicpack_v0.0.1/ to your server and run the server-installer.jar on the server to download mods and modloader installer directly make sure to not update a running server (so either stop it or install into a new directory and then transfer worlds and configs) assuming your server runs in the folder /home/user/server/magicpack on your server and you want to use /home/user/_upload/ as a temporary upload directory # upload rsync _upload/server/magicpack_v0.0.1/ user@minecraftserver:/home/user/_upload ssh user@minecraftserver cd /home/user/_upload/magicpack_v0.0.1/ # doanlods mods, modloader and installs them in the server java -jar server-installer.jar /home/user/server/magicpack # delete the installer cd .. rm -rf magicpack_v0.0.1/","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"How to create a pack from scratch","title":"Quickstart"},{"location":"quickstart/#basic-concepts","text":"Voodoo Packs are recipes for Voodoo to figure out all mods and dependencies this creates lockpacks , where voodoo pinned all versions and copied input files intoa archine voodoo packages using the lockpacks as inputs, providing reproducable deployments","title":"Basic Concepts"},{"location":"quickstart/#downloading-voodoo","text":"grab yourself a voodoo jar from the releases # verify voodoo version java -jar voodoo.jar # optional # setup alias for the rest of the tutorial alias voodoo = \"java -jar $( readlink -f voodoo-0.6.0-SNAPSHOT.jar ) \" # optional # setup bash autocomplete _VOODOO_COMPLETE = bash voodoo > voodoo-autocomplete.sh source voodoo-autocomplete.sh","title":"Downloading Voodoo"},{"location":"quickstart/#setup-modpack-repository","text":"run the generateSchema command once to make it generate a config.json voodoo generateSchema now you should see config.json /config.json { \"$schema\" : \"./schema/config.schema.json\" , \"curseforgeGenerators\" : { }, \"forgeGenerators\" : { }, \"fabricGenerators\" : { }, \"overrides\" : { } }","title":"Setup Modpack Repository"},{"location":"quickstart/#gitignore","text":"these folders should probably be gitignored because they contain autogenerated content (lots of it) so greate a .gitignore file (//TODO: make this part of a setup command) /.gitignore .completions /_upload/ reports/ logs/ docs/ schema/","title":"gitignore"},{"location":"quickstart/#autocompletion-configuration","text":"we are interested in fabric and fabric mods on curseforge /config.json { \"$schema\" : \"./schema/config.schema.json\" , \"curseforgeGenerators\" : { \"Fabric\" : { \"section\" : \"MODS\" , \"categories\" : [ \"Fabric\" ], \"mcVersions\" : [ \"1.16\" , \"1.16.1\" , \"1.16.2\" , \"1.16.3\" ] } }, \"forgeGenerators\" : { }, \"fabricGenerators\" : { \"Fabric\" : { \"requireStable\" : true } }, \"overrides\" : { } } after running generateSchema again these will be available via json-schema for autocompletions","title":"Autocompletion Configuration"},{"location":"quickstart/#create-a-modpack","text":"we are going to create modpack with the id magicpack for Minecraft version 1.16.3 (but this is just for the first version of the pack) voodoo create pack --id magicpack --mcVersion 1 .16.3 you should now see a new folder magicpack/ containing several files /magicpack/modpack.meta.json contains general pack information as well as where you will upload your modpack (fileserver or similar) /magicpack/v0.0.1.voodoo.json contains specific info about one version as well as the modlist the filename does not matter as long as the extension matches .voodoo.json magicpack/v0.0.1_src/ is the folder for all configuration file and related things, this is going to be minecraft/ folder the version specific .voodoo.json contains a reference to the folder name, try to keep them separate when maintaining multiple versions","title":"Create a Modpack"},{"location":"quickstart/#set-modloader","text":"by default the modloader is set to None /magicpack/v0.0.1.voodoo.json \"modloader\" : { \"type\" : \"modloader.none\" } , lets replace with with fabric /magicpack/v0.0.1.voodoo.json \"modloader\" : { \"type\" : \"modloader.fabric\" , \"intermediateMappings\" : \"Fabric/1.16.3\" } , Fabric/1.16.3 is from the fabricGenerator that was named Fabric this field has json-schema enum constraint, so autocompletion should be available after running generateSchema","title":"Set Modloader"},{"location":"quickstart/#add-mods","text":"currently the modlist is empty: /magicpack/v0.0.1.voodoo.json \"mods\" : [ ] there is multiple types of entries for mods - curse for curseforge mods - direct for direct url downloads - jenkins for things fro ma jenkins CI server - local for taking mods from /local/ folder since we setup mods from curseforge with the name Fabric we can use them so lets add some mods /magicpack/v0.0.1.voodoo.json \"mods\" : [ { \"type\" : \"curse\" , \"projectName\" : \"Fabric/appleskin\" }, { \"type\" : \"curse\" , \"projectName\" : \"Fabric/hwyla\" } ] //TODO: add sections about overrides and properties of entries","title":"Add Mods"},{"location":"quickstart/#building-the-pack","text":"building the pack does resolve all dependencies of entries and pins versions voodoo build --id magicpack this created /magicpack/lock/ folder cotnaining the output artifacts DO NOT DELETE this folder unless you know what you are doing this folder contains the inputs for all tasks (except build )","title":"Building the pack"},{"location":"quickstart/#testing-in-multimc","text":"before deploying the pack, lets make sure it runs first before this make sure multimc is in your PATH voodoo launch multimc --id magicpack","title":"Testing in MultiMC"},{"location":"quickstart/#packaging-and-upload","text":"voodoo package --id magicpack --target voodoo --target mmc-voodoo --target server this created /_upload/voodoo/ , /_upload/multimc-voodoo and /_upload/server/","title":"Packaging and Upload"},{"location":"quickstart/#upload-selfupdating-pack","text":"upload the content of /_upload/voodoo/ to $uploadBaseUrl (configured in /magicpack/modpack.meta.json ) make sure to NOT DELETE existing files on the fileserver example: \"uploadBaseUrl\": \"https://mydomain.com/mc/\" /_upload/voodoo/packages.json should be accessible from https://mydomain.com/mc/packages.json /_upload/multimc-voodoo contains multimc instances that selfupdate (TODO: currently it create a zip for each version, but they all selfupdate?)","title":"upload selfupdating pack"},{"location":"quickstart/#deploy-server","text":"upload /_upload/server/magicpack_v0.0.1/ to your server and run the server-installer.jar on the server to download mods and modloader installer directly make sure to not update a running server (so either stop it or install into a new directory and then transfer worlds and configs) assuming your server runs in the folder /home/user/server/magicpack on your server and you want to use /home/user/_upload/ as a temporary upload directory # upload rsync _upload/server/magicpack_v0.0.1/ user@minecraftserver:/home/user/_upload ssh user@minecraftserver cd /home/user/_upload/magicpack_v0.0.1/ # doanlods mods, modloader and installs them in the server java -jar server-installer.jar /home/user/server/magicpack # delete the installer cd .. rm -rf magicpack_v0.0.1/","title":"Deploy server"}]}