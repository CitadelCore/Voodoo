{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Voodoo \u00b6 About \u00b6 Creating Modpacks with Voodoo requires minimal effort, just create one .voodoo.json or .voodoo.kts definition per modpack You can Test Any pack in MultiMC, creating a instance and launching it is completely automated, no more clicking than necessary Modern Minecraft versions (1.6.+), Forge and Fabric are supported packages to custom (TODO: add link and readme) Pack Format No Rehosting of Mods! completely automated by preparing .url.txt files pointing to the original file location Reproducability: with a modpacks lockfile and src folder you can reproduce the modpack on any platform, server install or local testing (assuming that the urls do not get taken down or redirect anywhere else) Minimalistic Packs: on all platforms that support it (currently only the multimc-wrapper) mods will be downloaded by the user from the original location, Is Voodoo for you? \u00b6 Want to make a modpack ? quickly test locally and then make it available on multiple platforms for users ? voodoo is a set of tools to quickly prepare, build, test and deploy modpacks to users and servers Voodoo might be for you if: :heavy_check_mark: You want a fast and mostly automated process :heavy_check_mark: You want to be able to update the modpack whenever you want :heavy_check_mark: You don\u2019t want to depend on anyone else or :heavy_check_mark: You already used SKCraft Launcher Cons \u00b6 It may not be for you if: :small_orange_diamond: You do not feel comfortable using a shell :small_orange_diamond: You do not feel comfortable using a IDE or text editor with syntax highlighting :small_orange_diamond: You don\u2019t have a website or place for people to download files from and do not want to publish files to curse :small_orange_diamond: You don\u2019t want anything to do with distributing the launcher or pack This applies to different modules of voodoo individually.. without a place to host files you can still export a pack and upload it to curse, it will just be a much slower process due to approval and waiting time Wiki \u00b6 https://daemoniclabs.github.io/Voodoo Downloads \u00b6 you can grab binaries from the releases: https://github.com/DaemonicLabs/Voodoo/releases Usage examples \u00b6 # setup wrapper/shell scripts and gitignore java -jar voodoo.jar init project # generate json schema for autocompletion ./voodoo generateSchema # create a new pack ./voodoo init pack --id newPack --mcVersion 1 .16.2 # builds a pack ./voodoo compile newPack/v0.0.1.voodoo.json # packages for upload ./voodoo package --id mypack -p voodoo -p mmc-voodoo -p curse # launches pack in multimc ./voodoo launch multimc --id mypack bash and zsh autocomplete the autocompletions should be regenerated manually on voodoo update # creating a alias alias voodoo='java -jar voodoo.jar' # generating autocompletion for bash _VOODOO_COMPLETE=bash voodoo > ~/voodoo-completion.sh source ~/voodoo-completion.sh # generating autocompletion for zsh _VOODOO_COMPLETE=zsh voodoo > ~/voodoo-completion.sh # bash example alias voodoo='java -jar voodoo.jar' _VOODOO_COMPLETE=bash voodoo > voodoo-autocomplete.sh source voodoo-autocomplete.sh if you use a different alias then use the correct environment variable to generate completions the rules are command capitalized - replaced with _ with _ suffixed with _COMPLETE eg invoke-voodoo would be _INVOKE_VOODOO_COMPLETE Developing \u00b6 Developer Guide Support \u00b6 Feel welcome to post ideas and suggestions to our tracker . contact me directly in chat or on irc #unascribed @ irc.esper.net How to contribute? \u00b6 buy me a drink:","title":"Voodoo"},{"location":"#voodoo","text":"","title":"Voodoo"},{"location":"#about","text":"Creating Modpacks with Voodoo requires minimal effort, just create one .voodoo.json or .voodoo.kts definition per modpack You can Test Any pack in MultiMC, creating a instance and launching it is completely automated, no more clicking than necessary Modern Minecraft versions (1.6.+), Forge and Fabric are supported packages to custom (TODO: add link and readme) Pack Format No Rehosting of Mods! completely automated by preparing .url.txt files pointing to the original file location Reproducability: with a modpacks lockfile and src folder you can reproduce the modpack on any platform, server install or local testing (assuming that the urls do not get taken down or redirect anywhere else) Minimalistic Packs: on all platforms that support it (currently only the multimc-wrapper) mods will be downloaded by the user from the original location,","title":"About"},{"location":"#is-voodoo-for-you","text":"Want to make a modpack ? quickly test locally and then make it available on multiple platforms for users ? voodoo is a set of tools to quickly prepare, build, test and deploy modpacks to users and servers Voodoo might be for you if: :heavy_check_mark: You want a fast and mostly automated process :heavy_check_mark: You want to be able to update the modpack whenever you want :heavy_check_mark: You don\u2019t want to depend on anyone else or :heavy_check_mark: You already used SKCraft Launcher","title":"Is Voodoo for you?"},{"location":"#cons","text":"It may not be for you if: :small_orange_diamond: You do not feel comfortable using a shell :small_orange_diamond: You do not feel comfortable using a IDE or text editor with syntax highlighting :small_orange_diamond: You don\u2019t have a website or place for people to download files from and do not want to publish files to curse :small_orange_diamond: You don\u2019t want anything to do with distributing the launcher or pack This applies to different modules of voodoo individually.. without a place to host files you can still export a pack and upload it to curse, it will just be a much slower process due to approval and waiting time","title":"Cons"},{"location":"#wiki","text":"https://daemoniclabs.github.io/Voodoo","title":"Wiki"},{"location":"#downloads","text":"you can grab binaries from the releases: https://github.com/DaemonicLabs/Voodoo/releases","title":"Downloads"},{"location":"#usage-examples","text":"# setup wrapper/shell scripts and gitignore java -jar voodoo.jar init project # generate json schema for autocompletion ./voodoo generateSchema # create a new pack ./voodoo init pack --id newPack --mcVersion 1 .16.2 # builds a pack ./voodoo compile newPack/v0.0.1.voodoo.json # packages for upload ./voodoo package --id mypack -p voodoo -p mmc-voodoo -p curse # launches pack in multimc ./voodoo launch multimc --id mypack bash and zsh autocomplete the autocompletions should be regenerated manually on voodoo update # creating a alias alias voodoo='java -jar voodoo.jar' # generating autocompletion for bash _VOODOO_COMPLETE=bash voodoo > ~/voodoo-completion.sh source ~/voodoo-completion.sh # generating autocompletion for zsh _VOODOO_COMPLETE=zsh voodoo > ~/voodoo-completion.sh # bash example alias voodoo='java -jar voodoo.jar' _VOODOO_COMPLETE=bash voodoo > voodoo-autocomplete.sh source voodoo-autocomplete.sh if you use a different alias then use the correct environment variable to generate completions the rules are command capitalized - replaced with _ with _ suffixed with _COMPLETE eg invoke-voodoo would be _INVOKE_VOODOO_COMPLETE","title":"Usage examples"},{"location":"#developing","text":"Developer Guide","title":"Developing"},{"location":"#support","text":"Feel welcome to post ideas and suggestions to our tracker . contact me directly in chat or on irc #unascribed @ irc.esper.net","title":"Support"},{"location":"#how-to-contribute","text":"buy me a drink:","title":"How to contribute?"},{"location":"quickstart/","text":"Quickstart \u00b6 How to create a pack from scratch Basic Concepts \u00b6 Voodoo Packs are recipes for Voodoo to figure out all mods and dependencies this creates lockpacks , where voodoo pinned all versions and copied input files intoa archine voodoo packages using the lockpacks as inputs, providing reproducable deployments Downloading Voodoo \u00b6 grab yourself a voodoo jar from the releases # verify voodoo version java -jar voodoo.jar --version # initiates project working directory (sets up wrapper scripts and gitignore) java -jar voodoo.jar init project # optional # setup bash autocomplete _VOODOO_COMPLETE = bash ./voodoo > voodoo-autocomplete.sh source voodoo-autocomplete.sh Setup Modpack Repository \u00b6 run the generateSchema command once to make it generate a config.json and ./schema/ ./voodoo generateSchema now you should see config.json /config.json { \"$schema\" : \"./schema/config.schema.json\" , \"curseforgeGenerators\" : { }, \"forgeGenerators\" : { }, \"fabricGenerators\" : { }, \"overrides\" : { } } gitignore \u00b6 these folders should probably be gitignored because they contain autogenerated content (lots of it) so init created a gitignore file .gitignore /.completions/ /_upload/ /reports/ /logs/ /docs/ /schema/ /wrapper/bin/ // TODO: use https://facelessuser.github.io/pymdown-extensions/extensions/snippets/ to load actual .gitignore Autocompletion Configuration \u00b6 we are interested in fabric and fabric mods on curseforge /config.json { \"$schema\" : \"./schema/config.schema.json\" , \"curseforgeGenerators\" : { \"Fabric\" : { \"section\" : \"MODS\" , \"categories\" : [ \"Fabric\" ], \"mcVersions\" : [ \"1.16\" , \"1.16.1\" , \"1.16.2\" , \"1.16.3\" ] } }, \"forgeGenerators\" : { }, \"fabricGenerators\" : { \"Fabric\" : { \"requireStable\" : true } }, \"overrides\" : { } } after running generateSchema again these will be available via json-schema for autocompletions Create a Modpack \u00b6 we are going to create modpack with the id magicpack for Minecraft version 1.16.3 (but this is just for the first version of the pack) voodoo init pack --id magicpack --mcVersion 1 .16.3 you should now see a new folder magicpack/ containing several files /magicpack/modpack.meta.json contains general pack information as well as where you will upload your modpack (fileserver or similar) /magicpack/v0.0.1.voodoo.json contains specific info about one version as well as the modlist the filename does not matter as long as the extension matches .voodoo.json magicpack/v0.0.1_src/ is the folder for all configuration file and related things, this is going to be minecraft/ folder the version specific .voodoo.json contains a reference to the folder name, try to keep them separate when maintaining multiple versions Set Modloader \u00b6 by default the modloader is set to None /magicpack/v0.0.1.voodoo.json { \"$schema\" : \"../schema/versionPack.schema.json\" , \"version\" : \"0.0.1\" , \"mcVersion\" : \"1.16.3\" , \"srcDir\" : \"v0.0.1_src\" , \"modloader\" : { \"type\" : \"modloader.none\" }, \"mods\" : [ ] } lets replace with with fabric /magicpack/v0.0.1.voodoo.json { \"$schema\" : \"../schema/versionPack.schema.json\" , \"version\" : \"0.0.1\" , \"mcVersion\" : \"1.16.3\" , \"srcDir\" : \"v0.0.1_src\" , \"modloader\" : { \"type\" : \"modloader.fabric\" , \"intermediateMappings\" : \"Fabric/1.16.3\" }, \"mods\" : [ ] } Fabric/1.16.3 is from the fabricGenerator that was named Fabric this field has json-schema enum constraint, so autocompletion should be available after running generateSchema Add Mods \u00b6 currently the modlist is empty so lets add some there is multiple entry types that you can curse Curseforge mods downloads from curse CDN and also resolves dependencies direct Direct downloads of URLs can be rehosted or pointing to the original location jenkins This is for mods built on Jenkins CI local Takes files from /local/ folder noop No-operation Useful for replacing dependencies since we setup mods from curseforge with the name Fabric before, we can use them so lets add some mods /magicpack/v0.0.1.voodoo.json { \"$schema\" : \"../schema/versionPack.schema.json\" , \"version\" : \"0.0.1\" , \"mcVersion\" : \"1.16.3\" , \"srcDir\" : \"v0.0.1_src\" , \"modloader\" : { \"type\" : \"modloader.fabric\" , \"intermediateMappings\" : \"Fabric/1.16.3\" }, \"mods\" : [ { \"type\" : \"curse\" , \"projectName\" : \"Fabric/appleskin\" }, { \"type\" : \"curse\" , \"projectName\" : \"Fabric/hwyla\" } ] } //TODO: add sections about overrides and properties of entries Compiling the pack \u00b6 compiling the pack does resolve all dependencies of entries and pins versions voodoo compile magicpack/v0.0.1.voodoo.json this created /magicpack/lock/ folder containing the output artifacts DO NOT DELETE this folder unless you know what you are doing this folder contains the inputs for all tasks (except compile ) Testing in MultiMC \u00b6 before deploying the pack, lets make sure it runs first before this make sure multimc is in your PATH voodoo launch multimc magicpack/v0.0.1.voodoo.json Packaging and Upload \u00b6 voodoo package magicpack/modpack/meta.json voodoo mmc-voodoo server this created /_upload/voodoo/ , /_upload/multimc-voodoo and /_upload/server/ upload selfupdating pack \u00b6 upload the content of /_upload/voodoo/ to $uploadBaseUrl (configured in /magicpack/modpack.meta.json ) make sure to NOT DELETE existing files on the fileserver example with \"uploadBaseUrl\": \"https://mydomain.com/mc/\" /_upload/voodoo/magicpack.json should be accessible from https://mydomain.com/mc/magicpack.json /_upload/multimc-voodoo contains multimc instances that selfupdate Deploy server \u00b6 upload /_upload/server/magicpack_v0.0.1/ to your server and run the server-installer.jar on the server to download mods and modloader installer directly make sure to not update a running server (so either stop it or install into a new directory and then transfer worlds and configs) assuming your server runs in the folder /home/user/server/magicpack on your server and you want to use /home/user/_upload/ as a temporary upload directory upload to server rsync _upload/server/magicpack_v0.0.1/ user@minecraftserver:/home/user/_upload run on server cd /home/user/_upload/magicpack_v0.0.1/ # doanlods mods, modloader and installs them in the server java -jar server-installer.jar /home/user/server/magicpack # delete the installer cd .. rm -rf magicpack_v0.0.1/","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"How to create a pack from scratch","title":"Quickstart"},{"location":"quickstart/#basic-concepts","text":"Voodoo Packs are recipes for Voodoo to figure out all mods and dependencies this creates lockpacks , where voodoo pinned all versions and copied input files intoa archine voodoo packages using the lockpacks as inputs, providing reproducable deployments","title":"Basic Concepts"},{"location":"quickstart/#downloading-voodoo","text":"grab yourself a voodoo jar from the releases # verify voodoo version java -jar voodoo.jar --version # initiates project working directory (sets up wrapper scripts and gitignore) java -jar voodoo.jar init project # optional # setup bash autocomplete _VOODOO_COMPLETE = bash ./voodoo > voodoo-autocomplete.sh source voodoo-autocomplete.sh","title":"Downloading Voodoo"},{"location":"quickstart/#setup-modpack-repository","text":"run the generateSchema command once to make it generate a config.json and ./schema/ ./voodoo generateSchema now you should see config.json /config.json { \"$schema\" : \"./schema/config.schema.json\" , \"curseforgeGenerators\" : { }, \"forgeGenerators\" : { }, \"fabricGenerators\" : { }, \"overrides\" : { } }","title":"Setup Modpack Repository"},{"location":"quickstart/#gitignore","text":"these folders should probably be gitignored because they contain autogenerated content (lots of it) so init created a gitignore file .gitignore /.completions/ /_upload/ /reports/ /logs/ /docs/ /schema/ /wrapper/bin/ // TODO: use https://facelessuser.github.io/pymdown-extensions/extensions/snippets/ to load actual .gitignore","title":"gitignore"},{"location":"quickstart/#autocompletion-configuration","text":"we are interested in fabric and fabric mods on curseforge /config.json { \"$schema\" : \"./schema/config.schema.json\" , \"curseforgeGenerators\" : { \"Fabric\" : { \"section\" : \"MODS\" , \"categories\" : [ \"Fabric\" ], \"mcVersions\" : [ \"1.16\" , \"1.16.1\" , \"1.16.2\" , \"1.16.3\" ] } }, \"forgeGenerators\" : { }, \"fabricGenerators\" : { \"Fabric\" : { \"requireStable\" : true } }, \"overrides\" : { } } after running generateSchema again these will be available via json-schema for autocompletions","title":"Autocompletion Configuration"},{"location":"quickstart/#create-a-modpack","text":"we are going to create modpack with the id magicpack for Minecraft version 1.16.3 (but this is just for the first version of the pack) voodoo init pack --id magicpack --mcVersion 1 .16.3 you should now see a new folder magicpack/ containing several files /magicpack/modpack.meta.json contains general pack information as well as where you will upload your modpack (fileserver or similar) /magicpack/v0.0.1.voodoo.json contains specific info about one version as well as the modlist the filename does not matter as long as the extension matches .voodoo.json magicpack/v0.0.1_src/ is the folder for all configuration file and related things, this is going to be minecraft/ folder the version specific .voodoo.json contains a reference to the folder name, try to keep them separate when maintaining multiple versions","title":"Create a Modpack"},{"location":"quickstart/#set-modloader","text":"by default the modloader is set to None /magicpack/v0.0.1.voodoo.json { \"$schema\" : \"../schema/versionPack.schema.json\" , \"version\" : \"0.0.1\" , \"mcVersion\" : \"1.16.3\" , \"srcDir\" : \"v0.0.1_src\" , \"modloader\" : { \"type\" : \"modloader.none\" }, \"mods\" : [ ] } lets replace with with fabric /magicpack/v0.0.1.voodoo.json { \"$schema\" : \"../schema/versionPack.schema.json\" , \"version\" : \"0.0.1\" , \"mcVersion\" : \"1.16.3\" , \"srcDir\" : \"v0.0.1_src\" , \"modloader\" : { \"type\" : \"modloader.fabric\" , \"intermediateMappings\" : \"Fabric/1.16.3\" }, \"mods\" : [ ] } Fabric/1.16.3 is from the fabricGenerator that was named Fabric this field has json-schema enum constraint, so autocompletion should be available after running generateSchema","title":"Set Modloader"},{"location":"quickstart/#add-mods","text":"currently the modlist is empty so lets add some there is multiple entry types that you can curse Curseforge mods downloads from curse CDN and also resolves dependencies direct Direct downloads of URLs can be rehosted or pointing to the original location jenkins This is for mods built on Jenkins CI local Takes files from /local/ folder noop No-operation Useful for replacing dependencies since we setup mods from curseforge with the name Fabric before, we can use them so lets add some mods /magicpack/v0.0.1.voodoo.json { \"$schema\" : \"../schema/versionPack.schema.json\" , \"version\" : \"0.0.1\" , \"mcVersion\" : \"1.16.3\" , \"srcDir\" : \"v0.0.1_src\" , \"modloader\" : { \"type\" : \"modloader.fabric\" , \"intermediateMappings\" : \"Fabric/1.16.3\" }, \"mods\" : [ { \"type\" : \"curse\" , \"projectName\" : \"Fabric/appleskin\" }, { \"type\" : \"curse\" , \"projectName\" : \"Fabric/hwyla\" } ] } //TODO: add sections about overrides and properties of entries","title":"Add Mods"},{"location":"quickstart/#compiling-the-pack","text":"compiling the pack does resolve all dependencies of entries and pins versions voodoo compile magicpack/v0.0.1.voodoo.json this created /magicpack/lock/ folder containing the output artifacts DO NOT DELETE this folder unless you know what you are doing this folder contains the inputs for all tasks (except compile )","title":"Compiling the pack"},{"location":"quickstart/#testing-in-multimc","text":"before deploying the pack, lets make sure it runs first before this make sure multimc is in your PATH voodoo launch multimc magicpack/v0.0.1.voodoo.json","title":"Testing in MultiMC"},{"location":"quickstart/#packaging-and-upload","text":"voodoo package magicpack/modpack/meta.json voodoo mmc-voodoo server this created /_upload/voodoo/ , /_upload/multimc-voodoo and /_upload/server/","title":"Packaging and Upload"},{"location":"quickstart/#upload-selfupdating-pack","text":"upload the content of /_upload/voodoo/ to $uploadBaseUrl (configured in /magicpack/modpack.meta.json ) make sure to NOT DELETE existing files on the fileserver example with \"uploadBaseUrl\": \"https://mydomain.com/mc/\" /_upload/voodoo/magicpack.json should be accessible from https://mydomain.com/mc/magicpack.json /_upload/multimc-voodoo contains multimc instances that selfupdate","title":"upload selfupdating pack"},{"location":"quickstart/#deploy-server","text":"upload /_upload/server/magicpack_v0.0.1/ to your server and run the server-installer.jar on the server to download mods and modloader installer directly make sure to not update a running server (so either stop it or install into a new directory and then transfer worlds and configs) assuming your server runs in the folder /home/user/server/magicpack on your server and you want to use /home/user/_upload/ as a temporary upload directory upload to server rsync _upload/server/magicpack_v0.0.1/ user@minecraftserver:/home/user/_upload run on server cd /home/user/_upload/magicpack_v0.0.1/ # doanlods mods, modloader and installs them in the server java -jar server-installer.jar /home/user/server/magicpack # delete the installer cd .. rm -rf magicpack_v0.0.1/","title":"Deploy server"}]}