package voodoo.cli

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.core.requireObject
import io.ktor.client.request.*
import io.ktor.util.*
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.slf4j.MDCContext
import mu.KotlinLogging
import mu.withLoggingContext
import voodoo.util.Directories
import voodoo.util.download
import voodoo.util.maven.MavenUtil
import voodoo.util.toHexString
import voodoo.util.useClient
import voodoo.voodoo.GeneratedConstants
import java.io.File
import java.io.FileInputStream
import java.io.InputStream
import java.io.StringWriter
import java.lang.Exception
import java.security.MessageDigest
import java.util.*

class UpdateCommand : CliktCommand(
    name = "update",
    help = "updates the version of voodoo"
) {
    private val logger = KotlinLogging.logger {}
    val cliContext by requireObject<CLIContext>()

    override fun run(): Unit = withLoggingContext("command" to commandName) {
        val rootDir = cliContext.rootDir
        val directories = Directories.get(moduleName = "update")
        val cacheHome = directories.cacheHome

        runBlocking(MDCContext()) {
            val propertiesFile = rootDir.resolve("wrapper/wrapper.properties")
            propertiesFile.absoluteFile.parentFile.mkdirs()

            val properties = Properties().also { prop ->
                propertiesFile.bufferedReader().use {
                    prop.load(it)
                }
            }

            val version = MavenUtil.getReleaseVersionFromMavenMetadata(
                GeneratedConstants.MAVEN_URL,
                GeneratedConstants.MAVEN_GROUP,
                "voodoo"
            )
            logger.info { "updating to $version" }
            val groupPath = GeneratedConstants.MAVEN_GROUP.replace('.', '/')
            val distributionUrl = "${GeneratedConstants.MAVEN_URL}/$groupPath/voodoo/$version/voodoo-$version-${GeneratedConstants.MAVEN_SHADOW_CLASSIFIER}.jar"

            // validate the file exists and matches checksum
            val tmpFile = cacheHome.resolve(distributionUrl.substringAfterLast("/"))
            tmpFile.download(distributionUrl, cacheDir = cacheHome)
            useClient { client ->
                val md5 = client.get<String>(distributionUrl + ".md5")
                val fileMd5 = createMD5(tmpFile).toHexString()
                require(fileMd5 == md5) { "checksum file ${distributionUrl}.md5 does not match the actual checksum of $distributionUrl" }
            }

            properties["distributionUrl"] = distributionUrl
//            properties["distributionPath"] = "wrapper/bin"

            StringWriter().use {
                properties.store(it, "generated by: voodoo generateWrapper")
                propertiesFile.writeText(it.toString())
            }
        }
    }

    @Throws(Exception::class)
    fun createMD5(file: File): ByteArray {
        return file.inputStream().use { fis ->
            val buffer = ByteArray(1024)
            val complete = MessageDigest.getInstance("MD5")
            do {
                val numRead = fis.read(buffer)
                if (numRead > 0) {
                    complete.update(buffer, 0, numRead)
                }
            } while (numRead != -1)
           complete.digest()
        }
    }
}