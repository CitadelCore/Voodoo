// Generated by delombok at Sat Jul 14 01:46:55 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.builder;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.google.common.collect.Lists;
import java.util.Collection;
import java.util.EnumSet;
import java.util.List;

public class FnPatternList {
    private static final EnumSet<FnMatch.Flag> DEFAULT_FLAGS = EnumSet.of(FnMatch.Flag.CASEFOLD, FnMatch.Flag.PERIOD);
    private List<String> include = Lists.newArrayList();
    private List<String> exclude = Lists.newArrayList();
    @JsonIgnore
    private EnumSet<FnMatch.Flag> flags = DEFAULT_FLAGS;

    public void setInclude(List<String> include) {
        this.include = include != null ? include : Lists.<String>newArrayList();
    }

    public void setExclude(List<String> exclude) {
        this.exclude = exclude != null ? exclude : Lists.<String>newArrayList();
    }

    public boolean matches(String path) {
        return include != null && matches(path, include) && (exclude == null || !matches(path, exclude));
    }

    public boolean matches(String path, Collection<String> patterns) {
        for (String pattern : patterns) {
            if (FnMatch.fnmatch(pattern, path, flags)) {
                return true;
            }
        }
        return false;
    }

    @java.lang.SuppressWarnings("all")
    public FnPatternList() {
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getInclude() {
        return this.include;
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getExclude() {
        return this.exclude;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof FnPatternList)) return false;
        final FnPatternList other = (FnPatternList) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$include = this.getInclude();
        final java.lang.Object other$include = other.getInclude();
        if (this$include == null ? other$include != null : !this$include.equals(other$include)) return false;
        final java.lang.Object this$exclude = this.getExclude();
        final java.lang.Object other$exclude = other.getExclude();
        if (this$exclude == null ? other$exclude != null : !this$exclude.equals(other$exclude)) return false;
        final java.lang.Object this$flags = this.getFlags();
        final java.lang.Object other$flags = other.getFlags();
        if (this$flags == null ? other$flags != null : !this$flags.equals(other$flags)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof FnPatternList;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $include = this.getInclude();
        result = result * PRIME + ($include == null ? 43 : $include.hashCode());
        final java.lang.Object $exclude = this.getExclude();
        result = result * PRIME + ($exclude == null ? 43 : $exclude.hashCode());
        final java.lang.Object $flags = this.getFlags();
        result = result * PRIME + ($flags == null ? 43 : $flags.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "FnPatternList(include=" + this.getInclude() + ", exclude=" + this.getExclude() + ", flags=" + this.getFlags() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public EnumSet<FnMatch.Flag> getFlags() {
        return this.flags;
    }

    @java.lang.SuppressWarnings("all")
    public void setFlags(final EnumSet<FnMatch.Flag> flags) {
        this.flags = flags;
    }
}
