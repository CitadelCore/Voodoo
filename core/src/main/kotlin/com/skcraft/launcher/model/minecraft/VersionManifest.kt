// Generated by delombok at Sat Jul 14 04:26:21 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.model.minecraft

import kotlinx.serialization.KInput
import kotlinx.serialization.KSerialClassDesc
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Optional
import kotlinx.serialization.Serializable
import kotlinx.serialization.Serializer
import kotlinx.serialization.Transient
import kotlinx.serialization.internal.SerialClassDescImpl
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

@Serializable
data class VersionManifest(
    @Optional var id: String? = null,
    @Optional @Serializable(with = DateSerializer::class) var time: LocalDateTime? = null,
    @Optional @Serializable(with = DateSerializer::class) var releaseTime: LocalDateTime? = null,
    @Optional var assets: String? = null,
    @Optional var type: String? = null,
    @Optional var processArguments: String? = null,
    @Optional var minecraftArguments: String? = null,
    @Optional var mainClass: String? = null,
    @Optional var minimumLauncherVersion: Int = 0,
    @Optional var libraries: HashSet<Library> = hashSetOf()
) {

    @Transient
    val assetsIndex: String?
        get() = if (assets != null) assets else "legacy"
}

@Serializer(forClass = LocalDateTime::class)
object DateSerializer : KSerializer<LocalDateTime> {
    override val serialClassDesc: KSerialClassDesc = SerialClassDescImpl("java.util.LocalDateTime")

//    override fun save(output: KOutput, obj: Date) {
//        output.writeStringValue(obj.toLocaleString())
//    }

    override fun load(input: KInput): LocalDateTime {
        return LocalDateTime.parse(input.readStringValue(), DateTimeFormatter.ISO_OFFSET_DATE_TIME)
    }
}
