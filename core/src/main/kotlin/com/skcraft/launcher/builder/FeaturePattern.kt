// Generated by delombok at Sat Jul 14 01:46:55 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.builder

import com.skcraft.launcher.model.ExtendedFeaturePattern
import com.skcraft.launcher.model.modpack.Feature
import kotlinx.serialization.KOutput
import kotlinx.serialization.KSerialSaver
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.Serializer

@Serializable
data class FeaturePattern(
    @SerialName("properties")
    @Serializable(with = Feature.Companion::class)
    var feature: Feature,
    @SerialName("files")
    @Serializable(with = FnPatternList.Companion::class)
    var filePatterns: FnPatternList
) {
    fun matches(path: String): Boolean {
        return filePatterns.matches(path)
    }

    @Serializer(forClass = FeaturePattern::class)
    companion object {
        override fun save(output: KOutput, obj: FeaturePattern) {
            val elemOutput = output.writeBegin(serialClassDesc)
            elemOutput.writeSerializableElementValue(serialClassDesc, 0, Feature.Companion, obj.feature)
            elemOutput.writeSerializableElementValue(serialClassDesc, 1, FnPatternList.Companion, obj.filePatterns)
            elemOutput.writeEnd(serialClassDesc)
        }

        private fun <T : Any?> KOutput.serializeObj(default: T?, actual: T, saver: KSerialSaver<T>, index: Int) {
            if (default != actual || default != null) {
                this.writeSerializableElementValue(serialClassDesc, index, saver, actual)
            }
        }
    }
}
