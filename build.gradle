buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "http://dl.bintray.com/kotlin/kotlin-eap" }
    }
    dependencies {
        classpath group: 'org.jetbrains.dokka', name: 'dokka-gradle-plugin', version: '0.9.17'
        classpath group: 'com.vanniktech', name: 'gradle-dependency-graph-generator-plugin', version: '+'
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: project.kotlin_version
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.3'
    id "com.vanniktech.dependency.graph.generator" version "0.5.0"
    id "org.sonarqube" version "2.6.2"
    id 'idea'
}

apply plugin: 'project-report'

println """
*******************************************
 You are building Voodoo Toolset ! 

 Output files will be in [subproject]/build/libs
*******************************************
"""

allprojects {
    apply plugin: "kotlin"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = ['-XXLanguage:+InlineClasses']
        }
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url = "http://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url = 'http://repo.maven.apache.org/maven2' }
        maven { url = 'http://jcenter.bintray.com' }
        maven { url = "https://dl.bintray.com/s1m0nw1/KtsRunner" }
//        maven { url = 'https://jitpack.io' }
    }

    idea {
        module {
            excludeDirs += [file("run")]
        }
    }
}

subprojects {
    if (name == 'Jankson' || name == 'launcher-builder' || name == 'launcher') {
        sonarqube {
            skipProject = true
        }
    } else {
        apply plugin: "kotlin"
        group = group
        version = version
        apply plugin: 'org.jetbrains.dokka'
        sourceSets {
            main.kotlin.srcDirs += "$buildDir/generated-src"
        }
//    version = "${project.major}.${project.minor}.${project.patch}"
        compileKotlin.doFirst {
            def folder = project.name != "voodoo" ? "voodoo/${project.name}" : "voodoo"
            def name = project.name.tokenize('/').last().capitalize().tokenize('-')*.capitalize().join('')
            def templateSrc = project.parent.file("template/kotlin/voodoo/")
            copy {
                from templateSrc
                into "$buildDir/generated-src/$folder"
                expand(
                        PACKAGE: folder.replace('/', '.').replace('-', '.'),
                        NAME: name,
                        MAJOR_VERSION: project.major,
                        MINOR_VERSION: project.minor,
                        PATCH_VERSION: project.patch,
                        BUILD_NUMBER: System.env.BUILD_NUMBER ?: -1,
                        BUILD: System.env.BUILD_NUMBER ?: "dev"
                )
            }
//            fileTree("$buildDir/generated-src/$folder").visit { FileVisitDetails details ->
//                println "# " +details.file.path
//                details.file.readLines().forEach {
//                    println it
//                }
//            }

        }
        if (System.env.BUILD_NUMBER) {
            version = System.env.BUILD_NUMBER
        }

        //DOKKA

        dokka {
            outputFormat = 'gfm'
            outputDirectory = "${parent.projectDir}/docs/dokka"
        }
    }

}

// SPEK

repositories {
    maven { url "https://dl.bintray.com/spekframework/spek-dev" }
}
dependencies {
    testImplementation project(":voodoo")
    testImplementation (group: 'org.spekframework.spek2', name: 'spek-dsl-jvm', version: spek_version)  {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly (group: 'org.spekframework.spek2', name: 'spek-runner-junit5', version: spek_version) {
        // exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    // spek requires kotlin-reflect, can be omitted if already in the classpath
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
