// Generated by delombok at Sat Jul 14 04:26:21 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.model.minecraft

import com.fasterxml.jackson.annotation.*
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.skcraft.launcher.util.Environment
import com.skcraft.launcher.util.Platform
import java.util.regex.Pattern

@JsonIgnoreProperties(ignoreUnknown = true)
class Library(
        val name: String
) {
    companion object {
        fun String.split() =
                this.split(":".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
    }

    @Transient
    @get:JsonIgnore
    var group: String = name.split()[0]
    @Transient
    @get:JsonIgnore
    var artifact: String? = name.split()[1]
    @Transient
    @get:JsonIgnore
    var version: String? = name.split()[2]
    @JsonProperty("url")
    var baseUrl: String? = null
    var natives: Map<String, String>? = null
    var extract: Extract? = null
    var rules: List<Rule>? = null
    // Forge-added
    var comment: String? = null
    // Custom
    var isLocallyAvailable: Boolean = false

    fun matches(environment: Environment): Boolean {
        var allow = false
        if (rules != null) {
            for (rule in rules!!) {
                if (rule.matches(environment)) {
                    allow = rule.action == Action.ALLOW
                }
            }
        } else {
            allow = true
        }
        return allow
    }

    fun getNativeString(platform: Platform): String? {
        return if (natives != null) {
            when (platform) {
                Platform.LINUX -> natives!!["linux"]

                Platform.WINDOWS -> natives!!["windows"]

                Platform.MAC_OS_X -> natives!!["osx"]

                else -> null
            }
        } else {
            null
        }
    }

    fun getFilename(environment: Environment): String {
        val nativeString = getNativeString(environment.platform)
        return if (nativeString != null) {
            String.format("%s-%s-%s.jar", artifact, version, nativeString)
        } else String.format("%s-%s.jar", artifact, version)
    }

    fun getPath(environment: Environment): String {
        val builder = StringBuilder()
        builder.append(group.replace('.', '/'))
        builder.append("/")
        builder.append(artifact)
        builder.append("/")
        builder.append(version)
        builder.append("/")
        builder.append(getFilename(environment))
        var path = builder.toString()
        path = path.replace("\${arch}", environment.archBits)
        return path
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || javaClass != other.javaClass) return false
        val library = other as Library?
        return this.name == library!!.name
    }

    override fun hashCode(): Int {
        return this.name.hashCode()
    }


    class Rule {
        var action: Action? = null
        var os: OS? = null

        fun matches(environment: Environment): Boolean {
            return if (os == null) {
                true
            } else {
                os!!.matches(environment)
            }
        }

        override fun equals(other: Any?): Boolean {
            if (other === this) return true
            if (other !is Rule) return false
            if (if (this.action == null) other.action != null else this.action != other.action) return false
            return if (if (this.os == null) other.os != null else this.os != other.os) false else true
        }

        override fun hashCode(): Int {
            val PRIME = 59
            var result = 1
            result = result * PRIME + if (action == null) 43 else action!!.hashCode()
            result = result * PRIME + if (os == null) 43 else os!!.hashCode()
            return result
        }

        override fun toString(): String {
            return "Library.Rule(action=" + this.action + ", os=" + this.os + ")"
        }
    }


    class OS {
        @get:JsonProperty("name")
        @get:JsonDeserialize(using = PlatformDeserializer::class)
        @get:JsonSerialize(using = PlatformSerializer::class)
        var platform: Platform? = null
        var version: Pattern? = null

        fun matches(environment: Environment): Boolean {
            return (platform == null || platform == environment.platform) && (version == null || version!!.matcher(environment.platformVersion).matches())
        }

        override fun equals(other: Any?): Boolean {
            if (other === this) return true
            if (other !is OS) return false
            if (if (this.platform == null) other.platform != null else this.platform != other.platform) return false
            return !if (this.version == null) other.version != null else this.version != other.version
        }

        protected fun canEqual(other: Any): Boolean {
            return other is OS
        }

        override fun hashCode(): Int {
            val PRIME = 59
            var result = 1
            val `$platform` = this.platform
            result = result * PRIME + (`$platform`?.hashCode() ?: 43)
            val `$version` = this.version
            result = result * PRIME + (`$version`?.hashCode() ?: 43)
            return result
        }

        override fun toString(): String {
            return "Library.OS(platform=" + this.platform + ", version=" + this.version + ")"
        }
    }


    data class Extract(
            var exclude: List<String>
    )


    enum class Action {
        ALLOW, DISALLOW;

        @JsonValue
        fun toJson(): String {
            return name.toLowerCase()
        }

        companion object {

            @JsonCreator
            fun fromJson(text: String): Action {
                return valueOf(text.toUpperCase())
            }
        }
    }

    override fun toString(): String {
        return "Library(name=" + this.name + ", group=" + this.group + ", artifact=" + this.artifact + ", version=" + this.version + ", baseUrl=" + this.baseUrl + ", natives=" + this.natives + ", extract=" + this.extract + ", rules=" + this.rules + ", comment=" + this.comment + ", locallyAvailable=" + this.isLocallyAvailable + ")"
    }
}
