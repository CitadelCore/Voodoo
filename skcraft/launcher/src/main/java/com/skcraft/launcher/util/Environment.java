// Generated by delombok at Sat Jul 14 04:26:21 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.util;

/**
 * Represents information about the current environment.
 */
public class Environment {
    private final Platform platform;
    private final String platformVersion;
    private final String arch;

    /**
     * Get an instance of the current environment.
     *
     * @return the current environment
     */
    public static Environment getInstance() {
        return new Environment(detectPlatform(), System.getProperty("os.version"), System.getProperty("os.arch"));
    }

    public String getArchBits() {
        return arch.contains("64") ? "64" : "32";
    }

    /**
     * Detect the current platform.
     *
     * @return the current platform
     */
    public static Platform detectPlatform() {
        String osName = System.getProperty("os.name").toLowerCase();
        if (osName.contains("win")) return Platform.WINDOWS;
        if (osName.contains("mac")) return Platform.MAC_OS_X;
        if (osName.contains("solaris") || osName.contains("sunos")) return Platform.SOLARIS;
        if (osName.contains("linux")) return Platform.LINUX;
        if (osName.contains("unix")) return Platform.LINUX;
        if (osName.contains("bsd")) return Platform.LINUX;
        return Platform.UNKNOWN;
    }

    @SuppressWarnings("all")
    public Environment(final Platform platform, final String platformVersion, final String arch) {
        this.platform = platform;
        this.platformVersion = platformVersion;
        this.arch = arch;
    }

    @SuppressWarnings("all")
    public Platform getPlatform() {
        return this.platform;
    }

    @SuppressWarnings("all")
    public String getPlatformVersion() {
        return this.platformVersion;
    }

    @SuppressWarnings("all")
    public String getArch() {
        return this.arch;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Environment)) return false;
        final Environment other = (Environment) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$platform = this.getPlatform();
        final Object other$platform = other.getPlatform();
        if (this$platform == null ? other$platform != null : !this$platform.equals(other$platform)) return false;
        final Object this$platformVersion = this.getPlatformVersion();
        final Object other$platformVersion = other.getPlatformVersion();
        if (this$platformVersion == null ? other$platformVersion != null : !this$platformVersion.equals(other$platformVersion)) return false;
        final Object this$arch = this.getArch();
        final Object other$arch = other.getArch();
        if (this$arch == null ? other$arch != null : !this$arch.equals(other$arch)) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof Environment;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $platform = this.getPlatform();
        result = result * PRIME + ($platform == null ? 43 : $platform.hashCode());
        final Object $platformVersion = this.getPlatformVersion();
        result = result * PRIME + ($platformVersion == null ? 43 : $platformVersion.hashCode());
        final Object $arch = this.getArch();
        result = result * PRIME + ($arch == null ? 43 : $arch.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Environment(platform=" + this.getPlatform() + ", platformVersion=" + this.getPlatformVersion() + ", arch=" + this.getArch() + ")";
    }
}
