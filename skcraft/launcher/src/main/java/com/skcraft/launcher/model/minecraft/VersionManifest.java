// Generated by delombok at Sat Jul 14 04:26:21 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.model.minecraft;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.Date;
import java.util.LinkedHashSet;

@JsonIgnoreProperties(ignoreUnknown = true)
public class VersionManifest {
    private String id;
    private Date time;
    private Date releaseTime;
    private String assets;
    private String type;
    private String processArguments;
    private String minecraftArguments;
    private String mainClass;
    private int minimumLauncherVersion;
    private LinkedHashSet<Library> libraries;

    @JsonIgnore
    public String getAssetsIndex() {
        return getAssets() != null ? getAssets() : "legacy";
    }

    @SuppressWarnings("all")
    public VersionManifest() {
    }

    @SuppressWarnings("all")
    public String getId() {
        return this.id;
    }

    @SuppressWarnings("all")
    public Date getTime() {
        return this.time;
    }

    @SuppressWarnings("all")
    public Date getReleaseTime() {
        return this.releaseTime;
    }

    @SuppressWarnings("all")
    public String getAssets() {
        return this.assets;
    }

    @SuppressWarnings("all")
    public String getType() {
        return this.type;
    }

    @SuppressWarnings("all")
    public String getProcessArguments() {
        return this.processArguments;
    }

    @SuppressWarnings("all")
    public String getMinecraftArguments() {
        return this.minecraftArguments;
    }

    @SuppressWarnings("all")
    public String getMainClass() {
        return this.mainClass;
    }

    @SuppressWarnings("all")
    public int getMinimumLauncherVersion() {
        return this.minimumLauncherVersion;
    }

    @SuppressWarnings("all")
    public LinkedHashSet<Library> getLibraries() {
        return this.libraries;
    }

    @SuppressWarnings("all")
    public void setId(final String id) {
        this.id = id;
    }

    @SuppressWarnings("all")
    public void setTime(final Date time) {
        this.time = time;
    }

    @SuppressWarnings("all")
    public void setReleaseTime(final Date releaseTime) {
        this.releaseTime = releaseTime;
    }

    @SuppressWarnings("all")
    public void setAssets(final String assets) {
        this.assets = assets;
    }

    @SuppressWarnings("all")
    public void setType(final String type) {
        this.type = type;
    }

    @SuppressWarnings("all")
    public void setProcessArguments(final String processArguments) {
        this.processArguments = processArguments;
    }

    @SuppressWarnings("all")
    public void setMinecraftArguments(final String minecraftArguments) {
        this.minecraftArguments = minecraftArguments;
    }

    @SuppressWarnings("all")
    public void setMainClass(final String mainClass) {
        this.mainClass = mainClass;
    }

    @SuppressWarnings("all")
    public void setMinimumLauncherVersion(final int minimumLauncherVersion) {
        this.minimumLauncherVersion = minimumLauncherVersion;
    }

    @SuppressWarnings("all")
    public void setLibraries(final LinkedHashSet<Library> libraries) {
        this.libraries = libraries;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof VersionManifest)) return false;
        final VersionManifest other = (VersionManifest) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$id = this.getId();
        final Object other$id = other.getId();
        if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;
        final Object this$time = this.getTime();
        final Object other$time = other.getTime();
        if (this$time == null ? other$time != null : !this$time.equals(other$time)) return false;
        final Object this$releaseTime = this.getReleaseTime();
        final Object other$releaseTime = other.getReleaseTime();
        if (this$releaseTime == null ? other$releaseTime != null : !this$releaseTime.equals(other$releaseTime)) return false;
        final Object this$assets = this.getAssets();
        final Object other$assets = other.getAssets();
        if (this$assets == null ? other$assets != null : !this$assets.equals(other$assets)) return false;
        final Object this$type = this.getType();
        final Object other$type = other.getType();
        if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
        final Object this$processArguments = this.getProcessArguments();
        final Object other$processArguments = other.getProcessArguments();
        if (this$processArguments == null ? other$processArguments != null : !this$processArguments.equals(other$processArguments)) return false;
        final Object this$minecraftArguments = this.getMinecraftArguments();
        final Object other$minecraftArguments = other.getMinecraftArguments();
        if (this$minecraftArguments == null ? other$minecraftArguments != null : !this$minecraftArguments.equals(other$minecraftArguments)) return false;
        final Object this$mainClass = this.getMainClass();
        final Object other$mainClass = other.getMainClass();
        if (this$mainClass == null ? other$mainClass != null : !this$mainClass.equals(other$mainClass)) return false;
        if (this.getMinimumLauncherVersion() != other.getMinimumLauncherVersion()) return false;
        final Object this$libraries = this.getLibraries();
        final Object other$libraries = other.getLibraries();
        if (this$libraries == null ? other$libraries != null : !this$libraries.equals(other$libraries)) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof VersionManifest;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $id = this.getId();
        result = result * PRIME + ($id == null ? 43 : $id.hashCode());
        final Object $time = this.getTime();
        result = result * PRIME + ($time == null ? 43 : $time.hashCode());
        final Object $releaseTime = this.getReleaseTime();
        result = result * PRIME + ($releaseTime == null ? 43 : $releaseTime.hashCode());
        final Object $assets = this.getAssets();
        result = result * PRIME + ($assets == null ? 43 : $assets.hashCode());
        final Object $type = this.getType();
        result = result * PRIME + ($type == null ? 43 : $type.hashCode());
        final Object $processArguments = this.getProcessArguments();
        result = result * PRIME + ($processArguments == null ? 43 : $processArguments.hashCode());
        final Object $minecraftArguments = this.getMinecraftArguments();
        result = result * PRIME + ($minecraftArguments == null ? 43 : $minecraftArguments.hashCode());
        final Object $mainClass = this.getMainClass();
        result = result * PRIME + ($mainClass == null ? 43 : $mainClass.hashCode());
        result = result * PRIME + this.getMinimumLauncherVersion();
        final Object $libraries = this.getLibraries();
        result = result * PRIME + ($libraries == null ? 43 : $libraries.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "VersionManifest(id=" + this.getId() + ", time=" + this.getTime() + ", releaseTime=" + this.getReleaseTime() + ", assets=" + this.getAssets() + ", type=" + this.getType() + ", processArguments=" + this.getProcessArguments() + ", minecraftArguments=" + this.getMinecraftArguments() + ", mainClass=" + this.getMainClass() + ", minimumLauncherVersion=" + this.getMinimumLauncherVersion() + ", libraries=" + this.getLibraries() + ")";
    }
}
