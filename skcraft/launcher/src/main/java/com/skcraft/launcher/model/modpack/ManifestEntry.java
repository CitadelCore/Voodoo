// Generated by delombok at Sat Jul 14 04:26:21 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.model.modpack;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
//import com.skcraft.launcher.install.InstallLog;
//import com.skcraft.launcher.install.Installer;
//import com.skcraft.launcher.install.UpdateCache;
import java.io.File;

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = FileInstall.class)
@JsonSubTypes({@JsonSubTypes.Type(value = FileInstall.class, name = "file")})
public abstract class ManifestEntry {
    @JsonBackReference("manifest")
    private Manifest manifest;
    private Condition when;

    @SuppressWarnings("all")
    public ManifestEntry() {
    }

    @SuppressWarnings("all")
    public Manifest getManifest() {
        return this.manifest;
    }

    @SuppressWarnings("all")
    public Condition getWhen() {
        return this.when;
    }

    @SuppressWarnings("all")
    public void setManifest(final Manifest manifest) {
        this.manifest = manifest;
    }

    @SuppressWarnings("all")
    public void setWhen(final Condition when) {
        this.when = when;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof ManifestEntry)) return false;
        final ManifestEntry other = (ManifestEntry) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$manifest = this.getManifest();
        final Object other$manifest = other.getManifest();
        if (this$manifest == null ? other$manifest != null : !this$manifest.equals(other$manifest)) return false;
        final Object this$when = this.getWhen();
        final Object other$when = other.getWhen();
        if (this$when == null ? other$when != null : !this$when.equals(other$when)) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof ManifestEntry;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $manifest = this.getManifest();
        result = result * PRIME + ($manifest == null ? 43 : $manifest.hashCode());
        final Object $when = this.getWhen();
        result = result * PRIME + ($when == null ? 43 : $when.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "ManifestEntry(when=" + this.getWhen() + ")";
    }
//    public abstract void install(Installer installer, InstallLog log, UpdateCache cache, File contentDir) throws Exception;
}
