// Generated by delombok at Sat Jul 14 04:26:21 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.model.minecraft;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.skcraft.launcher.util.Environment;
import com.skcraft.launcher.util.Platform;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

@JsonIgnoreProperties(ignoreUnknown = true)
public class Library {
    private String name;
    private transient String group;
    private transient String artifact;
    private transient String version;
    @JsonProperty("url")
    private String baseUrl;
    private Map<String, String> natives;
    private Extract extract;
    private List<Rule> rules;
    // Forge-added
    private String comment;
    // Custom
    private boolean locallyAvailable;

    public void setName(String name) {
        this.name = name;
        if (name != null) {
            String[] parts = name.split(":");
            this.group = parts[0];
            this.artifact = parts[1];
            this.version = parts[2];
        } else {
            this.group = null;
            this.artifact = null;
            this.version = null;
        }
    }

    public boolean matches(Environment environment) {
        boolean allow = false;
        if (getRules() != null) {
            for (Rule rule : getRules()) {
                if (rule.matches(environment)) {
                    allow = rule.getAction() == Action.ALLOW;
                }
            }
        } else {
            allow = true;
        }
        return allow;
    }

    @JsonIgnore
    public String getGroup() {
        return group;
    }

    @JsonIgnore
    public String getArtifact() {
        return artifact;
    }

    @JsonIgnore
    public String getVersion() {
        return version;
    }

    public String getNativeString(Platform platform) {
        if (getNatives() != null) {
            switch (platform) {
            case LINUX: 
                return getNatives().get("linux");

            case WINDOWS: 
                return getNatives().get("windows");

            case MAC_OS_X: 
                return getNatives().get("osx");

            default: 
                return null;
            }
        } else {
            return null;
        }
    }

    public String getFilename(Environment environment) {
        String nativeString = getNativeString(environment.getPlatform());
        if (nativeString != null) {
            return String.format("%s-%s-%s.jar", getArtifact(), getVersion(), nativeString);
        }
        return String.format("%s-%s.jar", getArtifact(), getVersion());
    }

    public String getPath(Environment environment) {
        StringBuilder builder = new StringBuilder();
        builder.append(getGroup().replace('.', '/'));
        builder.append("/");
        builder.append(getArtifact());
        builder.append("/");
        builder.append(getVersion());
        builder.append("/");
        builder.append(getFilename(environment));
        String path = builder.toString();
        path = path.replace("${arch}", environment.getArchBits());
        return path;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Library library = (Library) o;
        if (name != null ? !name.equals(library.name) : library.name != null) return false;
        return true;
    }

    @Override
    public int hashCode() {
        return name != null ? name.hashCode() : 0;
    }


    public static class Rule {
        private Action action;
        private OS os;

        public boolean matches(Environment environment) {
            if (getOs() == null) {
                return true;
            } else {
                return getOs().matches(environment);
            }
        }

        @SuppressWarnings("all")
        public Rule() {
        }

        @SuppressWarnings("all")
        public Action getAction() {
            return this.action;
        }

        @SuppressWarnings("all")
        public OS getOs() {
            return this.os;
        }

        @SuppressWarnings("all")
        public void setAction(final Action action) {
            this.action = action;
        }

        @SuppressWarnings("all")
        public void setOs(final OS os) {
            this.os = os;
        }

        @Override
        @SuppressWarnings("all")
        public boolean equals(final Object o) {
            if (o == this) return true;
            if (!(o instanceof Rule)) return false;
            final Rule other = (Rule) o;
            if (!other.canEqual((Object) this)) return false;
            final Object this$action = this.getAction();
            final Object other$action = other.getAction();
            if (this$action == null ? other$action != null : !this$action.equals(other$action)) return false;
            final Object this$os = this.getOs();
            final Object other$os = other.getOs();
            if (this$os == null ? other$os != null : !this$os.equals(other$os)) return false;
            return true;
        }

        @SuppressWarnings("all")
        protected boolean canEqual(final Object other) {
            return other instanceof Rule;
        }

        @Override
        @SuppressWarnings("all")
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final Object $action = this.getAction();
            result = result * PRIME + ($action == null ? 43 : $action.hashCode());
            final Object $os = this.getOs();
            result = result * PRIME + ($os == null ? 43 : $os.hashCode());
            return result;
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "Library.Rule(action=" + this.getAction() + ", os=" + this.getOs() + ")";
        }
    }


    public static class OS {
        private Platform platform;
        private Pattern version;

        @JsonProperty("name")
        @JsonDeserialize(using = PlatformDeserializer.class)
        @JsonSerialize(using = PlatformSerializer.class)
        public Platform getPlatform() {
            return platform;
        }

        public boolean matches(Environment environment) {
            return (getPlatform() == null || getPlatform().equals(environment.getPlatform())) && (getVersion() == null || getVersion().matcher(environment.getPlatformVersion()).matches());
        }

        @SuppressWarnings("all")
        public OS() {
        }

        @SuppressWarnings("all")
        public Pattern getVersion() {
            return this.version;
        }

        @SuppressWarnings("all")
        public void setPlatform(final Platform platform) {
            this.platform = platform;
        }

        @SuppressWarnings("all")
        public void setVersion(final Pattern version) {
            this.version = version;
        }

        @Override
        @SuppressWarnings("all")
        public boolean equals(final Object o) {
            if (o == this) return true;
            if (!(o instanceof OS)) return false;
            final OS other = (OS) o;
            if (!other.canEqual((Object) this)) return false;
            final Object this$platform = this.getPlatform();
            final Object other$platform = other.getPlatform();
            if (this$platform == null ? other$platform != null : !this$platform.equals(other$platform)) return false;
            final Object this$version = this.getVersion();
            final Object other$version = other.getVersion();
            if (this$version == null ? other$version != null : !this$version.equals(other$version)) return false;
            return true;
        }

        @SuppressWarnings("all")
        protected boolean canEqual(final Object other) {
            return other instanceof OS;
        }

        @Override
        @SuppressWarnings("all")
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final Object $platform = this.getPlatform();
            result = result * PRIME + ($platform == null ? 43 : $platform.hashCode());
            final Object $version = this.getVersion();
            result = result * PRIME + ($version == null ? 43 : $version.hashCode());
            return result;
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "Library.OS(platform=" + this.getPlatform() + ", version=" + this.getVersion() + ")";
        }
    }


    public static class Extract {
        private List<String> exclude;

        @SuppressWarnings("all")
        public Extract() {
        }

        @SuppressWarnings("all")
        public List<String> getExclude() {
            return this.exclude;
        }

        @SuppressWarnings("all")
        public void setExclude(final List<String> exclude) {
            this.exclude = exclude;
        }

        @Override
        @SuppressWarnings("all")
        public boolean equals(final Object o) {
            if (o == this) return true;
            if (!(o instanceof Extract)) return false;
            final Extract other = (Extract) o;
            if (!other.canEqual((Object) this)) return false;
            final Object this$exclude = this.getExclude();
            final Object other$exclude = other.getExclude();
            if (this$exclude == null ? other$exclude != null : !this$exclude.equals(other$exclude)) return false;
            return true;
        }

        @SuppressWarnings("all")
        protected boolean canEqual(final Object other) {
            return other instanceof Extract;
        }

        @Override
        @SuppressWarnings("all")
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final Object $exclude = this.getExclude();
            result = result * PRIME + ($exclude == null ? 43 : $exclude.hashCode());
            return result;
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "Library.Extract(exclude=" + this.getExclude() + ")";
        }
    }


    private enum Action {
        ALLOW, DISALLOW;

        @JsonCreator
        public static Action fromJson(String text) {
            return valueOf(text.toUpperCase());
        }

        @JsonValue
        public String toJson() {
            return name().toLowerCase();
        }
    }

    @SuppressWarnings("all")
    public Library() {
    }

    @SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @SuppressWarnings("all")
    public String getBaseUrl() {
        return this.baseUrl;
    }

    @SuppressWarnings("all")
    public Map<String, String> getNatives() {
        return this.natives;
    }

    @SuppressWarnings("all")
    public Extract getExtract() {
        return this.extract;
    }

    @SuppressWarnings("all")
    public List<Rule> getRules() {
        return this.rules;
    }

    @SuppressWarnings("all")
    public String getComment() {
        return this.comment;
    }

    @SuppressWarnings("all")
    public boolean isLocallyAvailable() {
        return this.locallyAvailable;
    }

    @SuppressWarnings("all")
    public void setGroup(final String group) {
        this.group = group;
    }

    @SuppressWarnings("all")
    public void setArtifact(final String artifact) {
        this.artifact = artifact;
    }

    @SuppressWarnings("all")
    public void setVersion(final String version) {
        this.version = version;
    }

    @SuppressWarnings("all")
    public void setBaseUrl(final String baseUrl) {
        this.baseUrl = baseUrl;
    }

    @SuppressWarnings("all")
    public void setNatives(final Map<String, String> natives) {
        this.natives = natives;
    }

    @SuppressWarnings("all")
    public void setExtract(final Extract extract) {
        this.extract = extract;
    }

    @SuppressWarnings("all")
    public void setRules(final List<Rule> rules) {
        this.rules = rules;
    }

    @SuppressWarnings("all")
    public void setComment(final String comment) {
        this.comment = comment;
    }

    @SuppressWarnings("all")
    public void setLocallyAvailable(final boolean locallyAvailable) {
        this.locallyAvailable = locallyAvailable;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Library(name=" + this.getName() + ", group=" + this.getGroup() + ", artifact=" + this.getArtifact() + ", version=" + this.getVersion() + ", baseUrl=" + this.getBaseUrl() + ", natives=" + this.getNatives() + ", extract=" + this.getExtract() + ", rules=" + this.getRules() + ", comment=" + this.getComment() + ", locallyAvailable=" + this.isLocallyAvailable() + ")";
    }
}
