// Generated by delombok at Sat Jul 14 05:49:42 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.model.modpack;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.Strings;
import com.skcraft.launcher.Instance;
import com.skcraft.launcher.LauncherUtils;
import com.skcraft.launcher.model.minecraft.VersionManifest;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class Manifest extends BaseManifest {
    public static final int MIN_PROTOCOL_VERSION = 2;
    private int minimumVersion;
    private URL baseUrl;
    private String librariesLocation;
    private String objectsLocation;
    private String gameVersion;
    @JsonProperty("launch")
    private LaunchModifier launchModifier;
    private List<Feature> features = new ArrayList<Feature>();
    @JsonManagedReference("manifest")
    private List<ManifestEntry> tasks = new ArrayList<ManifestEntry>();
    private VersionManifest versionManifest;

    @JsonIgnore
    public URL getLibrariesUrl() {
        if (Strings.nullToEmpty(getLibrariesLocation()) == null) {
            return null;
        }
        try {
            return LauncherUtils.concat(baseUrl, Strings.nullToEmpty(getLibrariesLocation()) + "/");
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    @JsonIgnore
    public URL getObjectsUrl() {
        if (Strings.nullToEmpty(getObjectsLocation()) == null) {
            return baseUrl;
        }
        try {
            return LauncherUtils.concat(baseUrl, Strings.nullToEmpty(getObjectsLocation()) + "/");
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    public void updateName(String name) {
        if (name != null) {
            setName(name);
        }
    }

    public void updateTitle(String title) {
        if (title != null) {
            setTitle(title);
        }
    }

    public void updateGameVersion(String gameVersion) {
        if (gameVersion != null) {
            setGameVersion(gameVersion);
        }
    }

    public void update(Instance instance) {
        instance.setLaunchModifier(getLaunchModifier());
    }

    @SuppressWarnings("all")
    public Manifest() {
    }

    @SuppressWarnings("all")
    public int getMinimumVersion() {
        return this.minimumVersion;
    }

    @SuppressWarnings("all")
    public URL getBaseUrl() {
        return this.baseUrl;
    }

    @SuppressWarnings("all")
    public String getLibrariesLocation() {
        return this.librariesLocation;
    }

    @SuppressWarnings("all")
    public String getObjectsLocation() {
        return this.objectsLocation;
    }

    @SuppressWarnings("all")
    public String getGameVersion() {
        return this.gameVersion;
    }

    @SuppressWarnings("all")
    public LaunchModifier getLaunchModifier() {
        return this.launchModifier;
    }

    @SuppressWarnings("all")
    public List<Feature> getFeatures() {
        return this.features;
    }

    @SuppressWarnings("all")
    public List<ManifestEntry> getTasks() {
        return this.tasks;
    }

    @SuppressWarnings("all")
    public VersionManifest getVersionManifest() {
        return this.versionManifest;
    }

    @SuppressWarnings("all")
    public void setMinimumVersion(final int minimumVersion) {
        this.minimumVersion = minimumVersion;
    }

    @SuppressWarnings("all")
    public void setBaseUrl(final URL baseUrl) {
        this.baseUrl = baseUrl;
    }

    @SuppressWarnings("all")
    public void setLibrariesLocation(final String librariesLocation) {
        this.librariesLocation = librariesLocation;
    }

    @SuppressWarnings("all")
    public void setObjectsLocation(final String objectsLocation) {
        this.objectsLocation = objectsLocation;
    }

    @SuppressWarnings("all")
    public void setGameVersion(final String gameVersion) {
        this.gameVersion = gameVersion;
    }

    @SuppressWarnings("all")
    public void setLaunchModifier(final LaunchModifier launchModifier) {
        this.launchModifier = launchModifier;
    }

    @SuppressWarnings("all")
    public void setFeatures(final List<Feature> features) {
        this.features = features;
    }

    @SuppressWarnings("all")
    public void setTasks(final List<ManifestEntry> tasks) {
        this.tasks = tasks;
    }

    @SuppressWarnings("all")
    public void setVersionManifest(final VersionManifest versionManifest) {
        this.versionManifest = versionManifest;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Manifest(minimumVersion=" + this.getMinimumVersion() + ", baseUrl=" + this.getBaseUrl() + ", librariesLocation=" + this.getLibrariesLocation() + ", objectsLocation=" + this.getObjectsLocation() + ", gameVersion=" + this.getGameVersion() + ", launchModifier=" + this.getLaunchModifier() + ", features=" + this.getFeatures() + ", tasks=" + this.getTasks() + ", versionManifest=" + this.getVersionManifest() + ")";
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Manifest)) return false;
        final Manifest other = (Manifest) o;
        if (!other.canEqual((Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.getMinimumVersion() != other.getMinimumVersion()) return false;
        final Object this$baseUrl = this.getBaseUrl();
        final Object other$baseUrl = other.getBaseUrl();
        if (this$baseUrl == null ? other$baseUrl != null : !this$baseUrl.equals(other$baseUrl)) return false;
        final Object this$librariesLocation = this.getLibrariesLocation();
        final Object other$librariesLocation = other.getLibrariesLocation();
        if (this$librariesLocation == null ? other$librariesLocation != null : !this$librariesLocation.equals(other$librariesLocation)) return false;
        final Object this$objectsLocation = this.getObjectsLocation();
        final Object other$objectsLocation = other.getObjectsLocation();
        if (this$objectsLocation == null ? other$objectsLocation != null : !this$objectsLocation.equals(other$objectsLocation)) return false;
        final Object this$gameVersion = this.getGameVersion();
        final Object other$gameVersion = other.getGameVersion();
        if (this$gameVersion == null ? other$gameVersion != null : !this$gameVersion.equals(other$gameVersion)) return false;
        final Object this$launchModifier = this.getLaunchModifier();
        final Object other$launchModifier = other.getLaunchModifier();
        if (this$launchModifier == null ? other$launchModifier != null : !this$launchModifier.equals(other$launchModifier)) return false;
        final Object this$features = this.getFeatures();
        final Object other$features = other.getFeatures();
        if (this$features == null ? other$features != null : !this$features.equals(other$features)) return false;
        final Object this$tasks = this.getTasks();
        final Object other$tasks = other.getTasks();
        if (this$tasks == null ? other$tasks != null : !this$tasks.equals(other$tasks)) return false;
        final Object this$versionManifest = this.getVersionManifest();
        final Object other$versionManifest = other.getVersionManifest();
        if (this$versionManifest == null ? other$versionManifest != null : !this$versionManifest.equals(other$versionManifest)) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof Manifest;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + this.getMinimumVersion();
        final Object $baseUrl = this.getBaseUrl();
        result = result * PRIME + ($baseUrl == null ? 43 : $baseUrl.hashCode());
        final Object $librariesLocation = this.getLibrariesLocation();
        result = result * PRIME + ($librariesLocation == null ? 43 : $librariesLocation.hashCode());
        final Object $objectsLocation = this.getObjectsLocation();
        result = result * PRIME + ($objectsLocation == null ? 43 : $objectsLocation.hashCode());
        final Object $gameVersion = this.getGameVersion();
        result = result * PRIME + ($gameVersion == null ? 43 : $gameVersion.hashCode());
        final Object $launchModifier = this.getLaunchModifier();
        result = result * PRIME + ($launchModifier == null ? 43 : $launchModifier.hashCode());
        final Object $features = this.getFeatures();
        result = result * PRIME + ($features == null ? 43 : $features.hashCode());
        final Object $tasks = this.getTasks();
        result = result * PRIME + ($tasks == null ? 43 : $tasks.hashCode());
        final Object $versionManifest = this.getVersionManifest();
        result = result * PRIME + ($versionManifest == null ? 43 : $versionManifest.hashCode());
        return result;
    }
}
