// Generated by delombok at Sat Jul 14 04:26:21 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.model.modpack;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.google.common.hash.HashFunction;
import com.google.common.hash.Hashing;

import static com.google.common.base.Preconditions.checkNotNull;

public class FileInstall extends ManifestEntry {
    private static HashFunction hf = Hashing.sha1();
    private String version;
    private String hash;
    private String location;
    private String to;
    private long size;
    private boolean userFile;

    @JsonIgnore
    public String getImpliedVersion() {
        return checkNotNull(version != null ? version : hash);
    }

    @JsonIgnore
    public String getTargetPath() {
        return checkNotNull(this.to != null ? this.to : location);
    }

    @SuppressWarnings("all")
    public FileInstall() {
    }

    @SuppressWarnings("all")
    public String getVersion() {
        return this.version;
    }

    @SuppressWarnings("all")
    public String getHash() {
        return this.hash;
    }

    @SuppressWarnings("all")
    public String getLocation() {
        return this.location;
    }

    @SuppressWarnings("all")
    public String getTo() {
        return this.to;
    }

    @SuppressWarnings("all")
    public long getSize() {
        return this.size;
    }

    @SuppressWarnings("all")
    public boolean isUserFile() {
        return this.userFile;
    }

    @SuppressWarnings("all")
    public void setVersion(final String version) {
        this.version = version;
    }

    @SuppressWarnings("all")
    public void setHash(final String hash) {
        this.hash = hash;
    }

    @SuppressWarnings("all")
    public void setLocation(final String location) {
        this.location = location;
    }

    @SuppressWarnings("all")
    public void setTo(final String to) {
        this.to = to;
    }

    @SuppressWarnings("all")
    public void setSize(final long size) {
        this.size = size;
    }

    @SuppressWarnings("all")
    public void setUserFile(final boolean userFile) {
        this.userFile = userFile;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "FileInstall(version=" + this.getVersion() + ", hash=" + this.getHash() + ", location=" + this.getLocation() + ", to=" + this.getTo() + ", size=" + this.getSize() + ", userFile=" + this.isUserFile() + ")";
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof FileInstall)) return false;
        final FileInstall other = (FileInstall) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$version = this.getVersion();
        final Object other$version = other.getVersion();
        if (this$version == null ? other$version != null : !this$version.equals(other$version)) return false;
        final Object this$hash = this.getHash();
        final Object other$hash = other.getHash();
        if (this$hash == null ? other$hash != null : !this$hash.equals(other$hash)) return false;
        final Object this$location = this.getLocation();
        final Object other$location = other.getLocation();
        if (this$location == null ? other$location != null : !this$location.equals(other$location)) return false;
        final Object this$to = this.getTo();
        final Object other$to = other.getTo();
        if (this$to == null ? other$to != null : !this$to.equals(other$to)) return false;
        if (this.getSize() != other.getSize()) return false;
        if (this.isUserFile() != other.isUserFile()) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof FileInstall;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $version = this.getVersion();
        result = result * PRIME + ($version == null ? 43 : $version.hashCode());
        final Object $hash = this.getHash();
        result = result * PRIME + ($hash == null ? 43 : $hash.hashCode());
        final Object $location = this.getLocation();
        result = result * PRIME + ($location == null ? 43 : $location.hashCode());
        final Object $to = this.getTo();
        result = result * PRIME + ($to == null ? 43 : $to.hashCode());
        final long $size = this.getSize();
        result = result * PRIME + (int) ($size >>> 32 ^ $size);
        result = result * PRIME + (this.isUserFile() ? 79 : 97);
        return result;
    }
}
