// Generated by delombok at Sat Jul 14 01:46:55 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.builder;

import com.beust.jcommander.Parameter;
import com.beust.jcommander.ParameterException;
import java.io.File;

public class BuilderOptions {
    public static final String DEFAULT_CONFIG_FILENAME = "modpack.json";
    public static final String DEFAULT_VERSION_FILENAME = "version.json";
    public static final String DEFAULT_SRC_DIRNAME = "src";
    public static final String DEFAULT_LOADERS_DIRNAME = "loaders";
    // Configuration
    // Override config
    @Parameter(names = "--name")
    private String name;
    @Parameter(names = "--title")
    private String title;
    @Parameter(names = "--mc-version")
    private String gameVersion;
    // Required
    @Parameter(names = "--version", required = true)
    private String version;
    @Parameter(names = "--manifest-dest", required = true)
    private File manifestPath;
    // Overall paths
    @Parameter(names = {"--input", "-i"})
    private File inputPath;
    @Parameter(names = {"--output", "-o"})
    private File outputPath;
    // Input paths
    @Parameter(names = "--config")
    private File configPath;
    @Parameter(names = "--version-file")
    private File versionManifestPath;
    @Parameter(names = "--files")
    private File filesDir;
    @Parameter(names = "--loaders")
    private File loadersDir;
    // Output paths
    @Parameter(names = "--objects-dest")
    private File objectsDir;
    @Parameter(names = "--libraries-dest")
    private File librariesDir;
    @Parameter(names = "--libs-url")
    private String librariesLocation = "libraries";
    @Parameter(names = "--objects-url")
    private String objectsLocation = "objects";
    // Misc
    @Parameter(names = "--pretty-print")
    private boolean prettyPrinting;

    public void choosePaths() throws ParameterException {
        if (configPath == null) {
            requireInputPath("--config");
            configPath = new File(inputPath, DEFAULT_CONFIG_FILENAME);
        }
        if (versionManifestPath == null) {
            requireInputPath("--version");
            versionManifestPath = new File(inputPath, DEFAULT_VERSION_FILENAME);
        }
        if (filesDir == null) {
            requireInputPath("--files");
            filesDir = new File(inputPath, DEFAULT_SRC_DIRNAME);
        }
        if (loadersDir == null) {
            requireInputPath("--loaders");
            loadersDir = new File(inputPath, DEFAULT_LOADERS_DIRNAME);
        }
        if (objectsDir == null) {
            requireOutputPath("--objects-dest");
            objectsDir = new File(outputPath, objectsLocation);
        }
        if (librariesDir == null) {
            requireOutputPath("--libs-dest");
            librariesDir = new File(outputPath, librariesLocation);
        }
    }

    private void requireOutputPath(String name) throws ParameterException {
        if (outputPath == null) {
            throw new ParameterException("Because " + name + " was not specified, --output needs to be specified as the output directory and then " + name + " will be default to a pre-set path within the output directory");
        }
    }

    private void requireInputPath(String name) throws ParameterException {
        if (inputPath == null) {
            throw new ParameterException("Because " + name + " was not specified, --input needs to be specified as the project directory and then " + name + " will be default to a pre-set path within the project directory");
        }
    }

    @SuppressWarnings("all")
    public BuilderOptions() {
    }

    @SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @SuppressWarnings("all")
    public String getTitle() {
        return this.title;
    }

    @SuppressWarnings("all")
    public String getGameVersion() {
        return this.gameVersion;
    }

    @SuppressWarnings("all")
    public String getVersion() {
        return this.version;
    }

    @SuppressWarnings("all")
    public File getManifestPath() {
        return this.manifestPath;
    }

    @SuppressWarnings("all")
    public File getInputPath() {
        return this.inputPath;
    }

    @SuppressWarnings("all")
    public File getOutputPath() {
        return this.outputPath;
    }

    @SuppressWarnings("all")
    public File getConfigPath() {
        return this.configPath;
    }

    @SuppressWarnings("all")
    public File getVersionManifestPath() {
        return this.versionManifestPath;
    }

    @SuppressWarnings("all")
    public File getFilesDir() {
        return this.filesDir;
    }

    @SuppressWarnings("all")
    public File getLoadersDir() {
        return this.loadersDir;
    }

    @SuppressWarnings("all")
    public File getObjectsDir() {
        return this.objectsDir;
    }

    @SuppressWarnings("all")
    public File getLibrariesDir() {
        return this.librariesDir;
    }

    @SuppressWarnings("all")
    public String getLibrariesLocation() {
        return this.librariesLocation;
    }

    @SuppressWarnings("all")
    public String getObjectsLocation() {
        return this.objectsLocation;
    }

    @SuppressWarnings("all")
    public boolean isPrettyPrinting() {
        return this.prettyPrinting;
    }

    @SuppressWarnings("all")
    public void setName(final String name) {
        this.name = name;
    }

    @SuppressWarnings("all")
    public void setTitle(final String title) {
        this.title = title;
    }

    @SuppressWarnings("all")
    public void setGameVersion(final String gameVersion) {
        this.gameVersion = gameVersion;
    }

    @SuppressWarnings("all")
    public void setVersion(final String version) {
        this.version = version;
    }

    @SuppressWarnings("all")
    public void setManifestPath(final File manifestPath) {
        this.manifestPath = manifestPath;
    }

    @SuppressWarnings("all")
    public void setInputPath(final File inputPath) {
        this.inputPath = inputPath;
    }

    @SuppressWarnings("all")
    public void setOutputPath(final File outputPath) {
        this.outputPath = outputPath;
    }

    @SuppressWarnings("all")
    public void setConfigPath(final File configPath) {
        this.configPath = configPath;
    }

    @SuppressWarnings("all")
    public void setVersionManifestPath(final File versionManifestPath) {
        this.versionManifestPath = versionManifestPath;
    }

    @SuppressWarnings("all")
    public void setFilesDir(final File filesDir) {
        this.filesDir = filesDir;
    }

    @SuppressWarnings("all")
    public void setLoadersDir(final File loadersDir) {
        this.loadersDir = loadersDir;
    }

    @SuppressWarnings("all")
    public void setObjectsDir(final File objectsDir) {
        this.objectsDir = objectsDir;
    }

    @SuppressWarnings("all")
    public void setLibrariesDir(final File librariesDir) {
        this.librariesDir = librariesDir;
    }

    @SuppressWarnings("all")
    public void setLibrariesLocation(final String librariesLocation) {
        this.librariesLocation = librariesLocation;
    }

    @SuppressWarnings("all")
    public void setObjectsLocation(final String objectsLocation) {
        this.objectsLocation = objectsLocation;
    }

    @SuppressWarnings("all")
    public void setPrettyPrinting(final boolean prettyPrinting) {
        this.prettyPrinting = prettyPrinting;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof BuilderOptions)) return false;
        final BuilderOptions other = (BuilderOptions) o;
        if (!other.canEqual((Object) this)) return false;
        final Object this$name = this.getName();
        final Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final Object this$title = this.getTitle();
        final Object other$title = other.getTitle();
        if (this$title == null ? other$title != null : !this$title.equals(other$title)) return false;
        final Object this$gameVersion = this.getGameVersion();
        final Object other$gameVersion = other.getGameVersion();
        if (this$gameVersion == null ? other$gameVersion != null : !this$gameVersion.equals(other$gameVersion)) return false;
        final Object this$version = this.getVersion();
        final Object other$version = other.getVersion();
        if (this$version == null ? other$version != null : !this$version.equals(other$version)) return false;
        final Object this$manifestPath = this.getManifestPath();
        final Object other$manifestPath = other.getManifestPath();
        if (this$manifestPath == null ? other$manifestPath != null : !this$manifestPath.equals(other$manifestPath)) return false;
        final Object this$inputPath = this.getInputPath();
        final Object other$inputPath = other.getInputPath();
        if (this$inputPath == null ? other$inputPath != null : !this$inputPath.equals(other$inputPath)) return false;
        final Object this$outputPath = this.getOutputPath();
        final Object other$outputPath = other.getOutputPath();
        if (this$outputPath == null ? other$outputPath != null : !this$outputPath.equals(other$outputPath)) return false;
        final Object this$configPath = this.getConfigPath();
        final Object other$configPath = other.getConfigPath();
        if (this$configPath == null ? other$configPath != null : !this$configPath.equals(other$configPath)) return false;
        final Object this$versionManifestPath = this.getVersionManifestPath();
        final Object other$versionManifestPath = other.getVersionManifestPath();
        if (this$versionManifestPath == null ? other$versionManifestPath != null : !this$versionManifestPath.equals(other$versionManifestPath)) return false;
        final Object this$filesDir = this.getFilesDir();
        final Object other$filesDir = other.getFilesDir();
        if (this$filesDir == null ? other$filesDir != null : !this$filesDir.equals(other$filesDir)) return false;
        final Object this$loadersDir = this.getLoadersDir();
        final Object other$loadersDir = other.getLoadersDir();
        if (this$loadersDir == null ? other$loadersDir != null : !this$loadersDir.equals(other$loadersDir)) return false;
        final Object this$objectsDir = this.getObjectsDir();
        final Object other$objectsDir = other.getObjectsDir();
        if (this$objectsDir == null ? other$objectsDir != null : !this$objectsDir.equals(other$objectsDir)) return false;
        final Object this$librariesDir = this.getLibrariesDir();
        final Object other$librariesDir = other.getLibrariesDir();
        if (this$librariesDir == null ? other$librariesDir != null : !this$librariesDir.equals(other$librariesDir)) return false;
        final Object this$librariesLocation = this.getLibrariesLocation();
        final Object other$librariesLocation = other.getLibrariesLocation();
        if (this$librariesLocation == null ? other$librariesLocation != null : !this$librariesLocation.equals(other$librariesLocation)) return false;
        final Object this$objectsLocation = this.getObjectsLocation();
        final Object other$objectsLocation = other.getObjectsLocation();
        if (this$objectsLocation == null ? other$objectsLocation != null : !this$objectsLocation.equals(other$objectsLocation)) return false;
        if (this.isPrettyPrinting() != other.isPrettyPrinting()) return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof BuilderOptions;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final Object $title = this.getTitle();
        result = result * PRIME + ($title == null ? 43 : $title.hashCode());
        final Object $gameVersion = this.getGameVersion();
        result = result * PRIME + ($gameVersion == null ? 43 : $gameVersion.hashCode());
        final Object $version = this.getVersion();
        result = result * PRIME + ($version == null ? 43 : $version.hashCode());
        final Object $manifestPath = this.getManifestPath();
        result = result * PRIME + ($manifestPath == null ? 43 : $manifestPath.hashCode());
        final Object $inputPath = this.getInputPath();
        result = result * PRIME + ($inputPath == null ? 43 : $inputPath.hashCode());
        final Object $outputPath = this.getOutputPath();
        result = result * PRIME + ($outputPath == null ? 43 : $outputPath.hashCode());
        final Object $configPath = this.getConfigPath();
        result = result * PRIME + ($configPath == null ? 43 : $configPath.hashCode());
        final Object $versionManifestPath = this.getVersionManifestPath();
        result = result * PRIME + ($versionManifestPath == null ? 43 : $versionManifestPath.hashCode());
        final Object $filesDir = this.getFilesDir();
        result = result * PRIME + ($filesDir == null ? 43 : $filesDir.hashCode());
        final Object $loadersDir = this.getLoadersDir();
        result = result * PRIME + ($loadersDir == null ? 43 : $loadersDir.hashCode());
        final Object $objectsDir = this.getObjectsDir();
        result = result * PRIME + ($objectsDir == null ? 43 : $objectsDir.hashCode());
        final Object $librariesDir = this.getLibrariesDir();
        result = result * PRIME + ($librariesDir == null ? 43 : $librariesDir.hashCode());
        final Object $librariesLocation = this.getLibrariesLocation();
        result = result * PRIME + ($librariesLocation == null ? 43 : $librariesLocation.hashCode());
        final Object $objectsLocation = this.getObjectsLocation();
        result = result * PRIME + ($objectsLocation == null ? 43 : $objectsLocation.hashCode());
        result = result * PRIME + (this.isPrettyPrinting() ? 79 : 97);
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "BuilderOptions(name=" + this.getName() + ", title=" + this.getTitle() + ", gameVersion=" + this.getGameVersion() + ", version=" + this.getVersion() + ", manifestPath=" + this.getManifestPath() + ", inputPath=" + this.getInputPath() + ", outputPath=" + this.getOutputPath() + ", configPath=" + this.getConfigPath() + ", versionManifestPath=" + this.getVersionManifestPath() + ", filesDir=" + this.getFilesDir() + ", loadersDir=" + this.getLoadersDir() + ", objectsDir=" + this.getObjectsDir() + ", librariesDir=" + this.getLibrariesDir() + ", librariesLocation=" + this.getLibrariesLocation() + ", objectsLocation=" + this.getObjectsLocation() + ", prettyPrinting=" + this.isPrettyPrinting() + ")";
    }
}
