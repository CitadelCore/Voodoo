// Generated by delombok at Sat Jul 14 01:46:55 CEST 2018
/*
 * SK's Minecraft Launcher
 * Copyright (C) 2010-2014 Albert Pham <http://www.sk89q.com> and contributors
 * Please see LICENSE.txt for license information.
 */
package com.skcraft.launcher.builder

import com.fasterxml.jackson.annotation.JsonIgnore
import com.google.common.collect.Lists
import java.util.EnumSet

class FnPatternList {
    var include: List<String> = Lists.newArrayList()
    var exclude: List<String> = Lists.newArrayList()
    @JsonIgnore
    var flags: EnumSet<FnMatch.Flag> = DEFAULT_FLAGS

    fun matches(path: String): Boolean {
        return matches(path, this.include) && !matches(path, this.exclude)
    }

    private fun matches(path: String, patterns: Collection<String>): Boolean {
        for (pattern in patterns) {
            if (FnMatch.match(pattern = pattern, string = path, flags = flags)) {
                return true
            }
        }
        return false
    }

    override fun equals(other: Any?): Boolean {
        if (other === this) return true
        if (other !is FnPatternList) return false
        val other = other as FnPatternList?
        if (!other!!.canEqual(this as Any)) return false
        if (this.include != other.include) return false
        if (this.exclude != other.exclude) return false
        return this.flags == other.flags
    }

    private fun canEqual(other: Any): Boolean {
        return other is FnPatternList
    }

    override fun hashCode(): Int {
        val PRIME = 59
        var result = 1
        result = result * PRIME + (this.include.hashCode())
        result = result * PRIME + (this.exclude.hashCode())
        result = result * PRIME + (this.flags.hashCode() )
        return result
    }

    override fun toString(): String {
        return "FnPatternList(include=" + this.include + ", exclude=" + this.exclude + ", flags=" + this.flags + ")"
    }

    companion object {
        private val DEFAULT_FLAGS = EnumSet.of<FnMatch.Flag>(FnMatch.Flag.CASEFOLD, FnMatch.Flag.PERIOD)
    }
}
