plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'application'
}

dependencies {
    compile project(':util')
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '+'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '+'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '+'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '+'
    compile group: 'com.github.jkcclemens', name: 'khttp', version: 'master-SNAPSHOT'
    compile group: 'com.github.aballano', name: 'MnemoniK', version: '+'
    compile group: 'io.github.microutils', name: 'kotlin-logging', version: '+'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '+'
    compile group: 'com.xenomachina', name: 'kotlin-argparser', version: '+'
}

mainClassName = "voodoo.MainKt"

def runDir = project.file("../run").path

def packDef = file(".")
if (project.hasProperty('ACK')) {
    packDef = project.file("../samples/${ACK}")
    if(!packDef.exists()) {
        packDef = project.file("../samples/${ACK}.yaml")
    }
    if(!packDef.exists()) {
        packDef = project.file("../samples/${ACK}.yaml")
    }
    if(!packDef.exists()) {
        packDef = file("$ACK")
    }
}
// pass -PACK=openpack to gradle

run {
    args = ["-d", runDir, packDef.path]
}

runShadow {
    args = ["-d", runDir, packDef.path]
}

task buildSamples {
    description = 'Build all Samples'
    fileTree(dir: '../samples', include:'*.yaml').each { file ->
        println "building $file"
        doLast {
            project.javaexec {
                classpath sourceSets.main.runtimeClasspath
                main = mainClassName
                args = ["-d", runDir, file.path]
            }
        }
    }
}

shadowJar {
    classifier = null
}

build.dependsOn(shadowJar)